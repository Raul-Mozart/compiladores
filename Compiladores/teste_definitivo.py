#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ TESTE FINAL DEFINITIVO DO COMPILADOR
Segue o padr√£o solicitado:
1. Escreve programa na linguagem especificada
2. Roda analisador l√©xico sobre o arquivo
3. Gera tabela com TOKEN | TIPO
4. Mostra erros com linha e coluna para tokens inv√°lidos
"""

import os
from teste_analise_lexica import AnalisadorLexico

def criar_programa_linguagem():
    """Cria um programa completo na linguagem especificada"""
    programa = """// PROGRAMA EXEMPLO NA LINGUAGEM ESPECIFICADA
// Demonstra todos os tipos de tokens

var int idade as 25;
var float altura as 1.75;
var string nome as "Jo√£o Silva";
var string cidade as "S√£o Paulo";
var bool ativo as true;
var bool inativo as false;

function int calcularIdade(anoNascimento) {
    var int anoAtual as 2023;
    var int resultado as anoAtual - anoNascimento;
    return resultado;
}

function bool ehMaiorIdade(idade) {
    if (idade >= 18) {
        return true;
    } else {
        return false;
    }
}

// Programa principal
var int anoNasc as 1995;
var int idadeCalculada as calcularIdade(anoNasc);
var bool maior as ehMaiorIdade(idadeCalculada);

if (maior and ativo) {
    var string mensagem as "Usu√°rio ativo e maior de idade";
    print(mensagem);
} else {
    print("Condi√ß√µes n√£o atendidas");
}

for int i in 1 .. 5 {
    var string msg as "Itera√ß√£o n√∫mero: ";
    print(msg + i);
}

// Exemplo com operadores
var int a as 10;
var int b as 5;
var int soma as a + b;
var int subtracao as a - b;
var int multiplicacao as a * b;
var int divisao as a / b;
var bool comparacao as (a > b) and (soma != divisao);

// Exemplo com arrays (lista)
var list numeros as [1, 2, 3, 4, 5];
var string textos as "Fim do programa";
"""
    
    # Salva o programa em arquivo
    with open("programa_exemplo.txt", "w", encoding="utf-8") as arquivo:
        arquivo.write(programa)
    
    print("üìù PROGRAMA CRIADO NA LINGUAGEM ESPECIFICADA")
    print("=" * 60)
    print("üìÅ Arquivo: programa_exemplo.txt")
    print(f"üìä Linhas: {programa.count('\\n') + 1}")
    print(f"üìè Caracteres: {len(programa)}")
    print()
    
    return "programa_exemplo.txt"

def gerar_tabela_tokens(resultado):
    """Gera tabela formatada com TOKEN | TIPO"""
    print("üìã TABELA DE TOKENS RECONHECIDOS")
    print("=" * 60)
    print(f"{'TOKEN':25} | {'TIPO':20}")
    print("-" * 60)
    
    # Filtra tokens vazios (newlines e whitespace) para tabela mais limpa
    tokens_relevantes = []
    for token_type, lexeme, linha, coluna in resultado['tokens']:
        if token_type not in ['NEWLINE', 'WHITESPACE']:
            tokens_relevantes.append((token_type, lexeme, linha, coluna))
    
    for token_type, lexeme, linha, coluna in tokens_relevantes:
        # Trunca tokens muito longos para melhor visualiza√ß√£o
        token_display = lexeme if len(lexeme) <= 23 else lexeme[:20] + "..."
        print(f"{token_display:25} | {token_type:20}")
    
    print("-" * 60)
    print(f"üìä Total de tokens relevantes: {len(tokens_relevantes)}")
    print(f"üìä Total de tokens (incluindo whitespace): {len(resultado['tokens'])}")

def mostrar_erros_detalhados(resultado):
    """Mostra erros com linha e coluna conforme especificado"""
    erros_lexicos = resultado.get('erros_lexicos', [])
    
    if erros_lexicos:
        print()
        print("‚ùå TOKENS N√ÉO RECONHECIDOS (ERROS L√âXICOS)")
        print("=" * 60)
        
        for i, erro in enumerate(erros_lexicos, 1):
            linha = erro['linha']
            coluna = erro['coluna']
            contexto = erro['contexto']
            mensagem = erro['mensagem']
            
            print(f"Erro {i}:")
            print(f"  üìç Localiza√ß√£o: Linha {linha}, Coluna {coluna}")
            print(f"  üö´ Token inv√°lido: '{contexto}'")
            print(f"  üí¨ Descri√ß√£o: {mensagem}")
            print()
        
        print(f"üìä Total de erros encontrados: {len(erros_lexicos)}")
    else:
        print()
        print("‚úÖ NENHUM TOKEN INV√ÅLIDO ENCONTRADO")
        print("=" * 60)
        print("Todos os tokens do programa foram reconhecidos com sucesso!")

def criar_programa_com_erros():
    """Cria um programa com tokens inv√°lidos para demonstrar detec√ß√£o de erros"""
    programa_com_erros = """// PROGRAMA COM TOKENS INV√ÅLIDOS (PARA DEMONSTRAR DETEC√á√ÉO DE ERROS)

var int idade as 25;
var string nome as "Jo√£o";
var int valor@ as 100;        // @ √© caractere inv√°lido
var float altura as 1.75;
var ‰∏≠ÊñáÂèòÈáè as "teste";         // Caracteres chineses inv√°lidos
var string texto as "sem fechar aspas
var bool flag as true;
var int outro# as 50;         // # √© caractere inv√°lido
"""
    
    # Salva o programa com erros
    with open("programa_com_erros.txt", "w", encoding="utf-8") as arquivo:
        arquivo.write(programa_com_erros)
    
    return "programa_com_erros.txt"

def executar_teste_padrao_solicitado():
    """Executa o teste seguindo exatamente o padr√£o solicitado"""
    print("üéØ TESTE FINAL SEGUINDO O PADR√ÉO ESPECIFICADO")
    print("=" * 80)
    print()
    
    # Passo 1: Criar programa na linguagem especificada
    print("PASSO 1: Criando programa na linguagem especificada...")
    arquivo_programa = criar_programa_linguagem()
    
    # Passo 2: Executar analisador l√©xico
    print("PASSO 2: Executando analisador l√©xico sobre o arquivo...")
    analisador = AnalisadorLexico()
    resultado = analisador.processar_arquivo(arquivo_programa)
    
    if "erro" in resultado:
        print(f"‚ùå Erro ao processar arquivo: {resultado['erro']}")
        return False
    
    print(f"‚úÖ An√°lise conclu√≠da!")
    print()
    
    # Passo 3: Gerar tabela TOKEN | TIPO
    gerar_tabela_tokens(resultado)
    
    # Passo 4: Mostrar erros com linha e coluna (se houver)
    mostrar_erros_detalhados(resultado)
    
    # Estat√≠sticas finais
    print()
    print("üìà ESTAT√çSTICAS FINAIS")
    print("=" * 60)
    print(f"üìÅ Arquivo analisado: {arquivo_programa}")
    print(f"üìù Linhas de c√≥digo: {resultado.get('linhas_codigo', 0)}")
    print(f"üìä Total de tokens: {resultado.get('total_tokens', 0)}")
    print(f"‚ùå Erros l√©xicos: {len(resultado.get('erros_lexicos', []))}")
    print(f"‚ö†Ô∏è Erros sem√¢nticos: {len(resultado.get('erros_semanticos', []))}")
    
    # Status final
    if resultado.get('analise_ok', False):
        print(f"‚úÖ Status: AN√ÅLISE BEM-SUCEDIDA")
    else:
        print(f"‚ùå Status: ERROS ENCONTRADOS")
    
    return resultado.get('analise_ok', False)

def executar_teste_com_erros():
    """Demonstra a detec√ß√£o de erros com tokens inv√°lidos"""
    print()
    print("üîç DEMONSTRA√á√ÉO: DETEC√á√ÉO DE TOKENS INV√ÅLIDOS")
    print("=" * 80)
    print()
    
    print("Criando programa com tokens inv√°lidos para demonstrar detec√ß√£o...")
    arquivo_erros = criar_programa_com_erros()
    
    analisador = AnalisadorLexico()
    resultado = analisador.processar_arquivo(arquivo_erros)
    
    if "erro" in resultado:
        print(f"‚ùå Erro ao processar arquivo: {resultado['erro']}")
        return
    
    print(f"üìÅ Analisando arquivo: {arquivo_erros}")
    print()
    
    # Mostra apenas os tokens v√°lidos encontrados
    tokens_validos = resultado.get('tokens', [])
    if tokens_validos:
        print("üìã TOKENS V√ÅLIDOS ENCONTRADOS")
        print("-" * 40)
        print(f"{'TOKEN':20} | {'TIPO':15}")
        print("-" * 40)
        
        for token_type, lexeme, linha, coluna in tokens_validos[:10]:  # Mostra s√≥ os primeiros 10
            token_display = lexeme if len(lexeme) <= 18 else lexeme[:15] + "..."
            print(f"{token_display:20} | {token_type:15}")
        
        if len(tokens_validos) > 100:
            print(f"... e mais {len(tokens_validos) - 10} tokens v√°lidos")
        print()
    
    # Mostra os erros encontrados
    mostrar_erros_detalhados(resultado)

def main():
    """Fun√ß√£o principal que executa o teste no padr√£o solicitado"""
    print("ÔøΩ TESTE FINAL DO ANALISADOR L√âXICO")
    print("Seguindo o padr√£o especificado:")
    print("1Ô∏è‚É£ Escrever programa na linguagem especificada")
    print("2Ô∏è‚É£ Rodar analisador l√©xico sobre o arquivo")  
    print("3Ô∏è‚É£ Gerar tabela TOKEN | TIPO")
    print("4Ô∏è‚É£ Mostrar erros com linha e coluna para tokens inv√°lidos")
    print()
    
    # Teste principal com programa v√°lido
    sucesso = executar_teste_padrao_solicitado()
    
    # Demonstra√ß√£o adicional com programa contendo erros
    executar_teste_com_erros()
    
    print()
    print("ÔøΩ CONCLUS√ÉO DO TESTE")
    print("=" * 80)
    
    if sucesso:
        print("‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
        print("‚úÖ Analisador l√©xico funcionando corretamente")
        print("‚úÖ Tabela de tokens gerada conforme especificado")
        print("‚úÖ Detec√ß√£o de erros com linha/coluna implementada")
        print("‚úÖ Suporte a UTF-8 e caracteres acentuados confirmado")
    else:
        print("‚ùå TESTE ENCONTROU PROBLEMAS")
        print("Verifique os erros reportados acima")
    
    print()
    print("üìÅ Arquivos gerados:")
    print("  ‚Ä¢ programa_exemplo.txt - Programa principal v√°lido")
    print("  ‚Ä¢ programa_com_erros.txt - Programa para demonstrar erros")
    print("  ‚Ä¢ relatorio_analise.txt - Relat√≥rio detalhado da an√°lise")

if __name__ == "__main__":
    main()